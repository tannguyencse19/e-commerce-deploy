{"version":3,"sources":["utils/Rating.jsx","utils/useFetch.js","views/Product/Summary.jsx","views/Category/Filter.jsx","views/Category/Views.jsx","utils/MyPagination.jsx","views/Category/Result.jsx","views/Category/Category.jsx"],"names":["Rating","React","forwardRef","ref","size","scale","fillColor","strokeColor","ratingProp","buttons","RatingButton","idx","fill","as","aria-label","height","width","_focus","outline","boxSize","color","stroke","fillOpacity","i","push","isInline","useFetch","link","useState","Products","setProducts","isLoading","setIsLoading","isError","setIsError","useEffect","fetch","then","res","json","catch","err","finally","ProductSummary","image","title","rating","price","isHover","spacing","_hover","transform","cursor","transitionDuration","align","base","lg","background","useColorModeValue","lightModeContainerColor","darkModeContainerColor","px","py","h","src","fit","mx","fontFamily","fontSize","maxW","rate","justifyContent","fontWeight","inputStyle","borderRadius","variant","Collection","value","Filter","onSelectCategory","onSearch","onSelectCollection","Category","setCategory","process","result","map","category","gap","placeholder","onChange","children","Search","option","Views","templateColumns","md","item","to","id","PageButton","startIdx","endIdx","currentPage","lastPage","handlePageClick","numberPageAhead","render","icon","ChevronLeft","onClick","Fragment","faEllipsisH","offset","colorScheme","ChevronRight","MyPagination","items","setCurrentItems","setLastPage","setCurrentPage","startOffset","setStartOffSet","itemsPerPage","setItemsPerPage","endOffset","console","log","slice","Math","ceil","length","isNaN","newOffset","defaultValue","target","parseInt","el","max","min","onKeyDown","e","key","Result","sliceProducts","setSliceProducts","URI","setURI","SearchValue","setSearchValue","filterResult","useMemo","filter","toLowerCase","indexOf","autoFlow","mt","DividerHelper","isHorizontal","thickness","speed","emptyColor"],"mappings":"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","file":"static/js/11.720e317c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Icon, Stack, Text } from \"@chakra-ui/react\";\nimport { StarIcon } from \"@chakra-ui/icons\";\n\nconst Rating = React.forwardRef(\n  ({ size, scale, fillColor, strokeColor, ratingProp }, ref) => {\n    // const [rating, setRating] = useState(0);\n    const buttons = [];\n\n    // const onClick = (idx) => {\n    //   if (!isNaN(idx)) {\n    //     // allow user to click first icon and set rating to zero if rating is already 1\n    //     if (rating === 1 && idx === 1) {\n    //       setRating(0);\n    //     } else {\n    //       setRating(idx);\n    //     }\n    //   }\n    // };\n\n    const RatingButton = ({ idx, fill }) => {\n      return (\n        <Box\n          as=\"button\"\n          aria-label={`Rate ${idx}`}\n          height={`${size}px`}\n          width={`${size}px`}\n          // onClick={() => onClick(idx)}\n          _focus={{ outline: 0 }}\n        >\n          <StarIcon\n            boxSize={`${size}px`}\n            color={fillColor}\n            stroke={strokeColor}\n            fillOpacity={fill ? \"100%\" : \"0\"}\n          />\n        </Box>\n      );\n    };\n\n    for (let i = 1; i <= scale; i++) {\n      buttons.push(<RatingButton key={i} idx={i} fill={i <= ratingProp} />);\n    }\n\n    return (\n      <Stack isInline>\n        {/* <input name=\"rating\" type=\"hidden\" value={ratingProp} ref={ref} /> */}\n        {buttons}\n      </Stack>\n    );\n  }\n);\n\nexport default Rating;\n","import React from \"react\";\n\nconst useFetch = (link) => {\n  const [Products, setProducts] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!link) return;\n\n    setIsLoading(true);\n\n    fetch(link)\n      .then((res) => res.json())\n      .then((json) => {\n        setProducts(json);\n      })\n      .catch((err) => {\n        setIsError(true);\n        // throw err;\n      })\n      .finally(() => setIsLoading(false));\n  }, [link])\n\n  return [Products, isLoading, isError];\n};\n\nexport default useFetch;\n","import { Text, VStack, Image, useColorModeValue } from \"@chakra-ui/react\";\r\nimport { darkModeContainerColor, lightModeContainerColor } from \"../../utils/Helper\";\r\nimport Rating from \"../../utils/Rating\";\r\n\r\nconst ProductSummary = ({ image, title, rating, price, isHover }) => {\r\n  return (\r\n    <VStack\r\n      spacing={3}\r\n      _hover={\r\n        isHover\r\n          ? {\r\n              transform: \"scale(1.04)\",\r\n              cursor: \"pointer\",\r\n            }\r\n          : null\r\n      }\r\n      transitionDuration=\"0.3s\"\r\n      align={{ base: \"center\", lg: \"flex-start\" }}\r\n      background={useColorModeValue(\r\n        lightModeContainerColor,\r\n        darkModeContainerColor\r\n      )}\r\n      px=\"5\"\r\n      py=\"10\"\r\n      h=\"95%\"\r\n    >\r\n      <Image src={image} boxSize=\"200px\" fit=\"contain\" mx=\"auto\" />\r\n      <Text fontFamily='\"Roboto\",serif' fontSize=\"md\" maxW=\"xs\">\r\n        {title}\r\n      </Text>\r\n      <Rating\r\n        size={16}\r\n        scale={5}\r\n        fillColor=\"gold\"\r\n        strokeColor=\"gold\"\r\n        ratingProp={rating.rate}\r\n      />\r\n      <VStack spacing={2} justifyContent=\"start\">\r\n        <Text fontSize=\"xl\" fontWeight=\"bold\" color=\"red\">\r\n          {price}\r\n        </Text>\r\n        {/* <Text color=\"gray.400\" fontSize=\"small\" lineHeight=\"35px\">\r\n            <strike>{item.price}</strike>\r\n          </Text> */}\r\n      </VStack>\r\n    </VStack>\r\n  );\r\n};\r\n\r\n// ProductSummary.defaultProps = {\r\n//   isHover: false\r\n// }\r\n\r\nexport default ProductSummary;\r\n","import { SearchIcon } from \"@chakra-ui/icons\";\nimport {\n  Grid,\n  GridItem,\n  Input,\n  Select,\n  InputGroup,\n  InputRightElement,\n  Container\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst inputStyle = {\n  borderRadius: \"20px\",\n  variant: \"filled\",\n};\n\nconst Collection = [\n  { value: \"halloween\", title: \"2021 Halloween Edition\" },\n  { value: \"trending\", title: \"Top Trending\" },\n  { value: \"newest\", title: \"Newest\" },\n];\n\nconst Filter = ({ onSelectCategory, onSelectCollection, onSearch }) => {\n  const [Category, setCategory] = React.useState([]);\n\n  React.useEffect(() => {\n    fetch(process.env.REACT_APP_GET_CATEGORIES)\n      .then((res) => res.json())\n      .then((json) => {\n        const result = json.map((category, idx) => {\n          return {\n            // value: CategoryValue[idx],\n            value: category,\n            title: category,\n          };\n        });\n        setCategory(result);\n      });\n  }, []);\n\n  return (\n    <Grid gap=\"5\">\n      <GridItem>\n        <InputGroup>\n          <Input placeholder=\"black hoodie 2021 edition\" {...inputStyle} onChange={onSearch} />\n          <InputRightElement children={<SearchIcon />} />\n        </InputGroup>\n      </GridItem>\n      <GridItem>\n        <Select placeholder=\"Category\" {...inputStyle} onChange={onSelectCategory}>\n          {Category &&\n            Category.map((option) => (\n              <option value={option.value} key={option.value}>\n                {option.title}\n              </option>\n            ))}\n        </Select>\n      </GridItem>\n      <GridItem>\n        <Select placeholder=\"Collection\" {...inputStyle}>\n          {Collection &&\n            Collection.map((option) => (\n              <option value={option.value} key={option.value}>\n                {option.title}\n              </option>\n            ))}\n        </Select>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default Filter;\n","import { Image, Grid, VStack, Text } from \"@chakra-ui/react\";\r\nimport Rating from \"../../utils/Rating\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport ProductSummary from \"../Product/Summary\";\r\n\r\nconst Views = ({ Products }) => {\r\n  return (\r\n    <Grid templateColumns={{ md: \"repeat(3, 30%)\" }} gap=\"10\">\r\n      {!Products && (\r\n        <h1>Server is under maintainance. Please comeback in a mintue ^^</h1>\r\n      )}\r\n      {Products &&\r\n        Products.map((item) => (\r\n          <RouterLink to={`/products/${item.id}`} key={`item-${item.id}`}>\r\n            <ProductSummary {...item} />\r\n          </RouterLink>\r\n        ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Views;\r\n","import {\n  Button,\n  IconButton,\n  Select,\n  NumberInput,\n  NumberInputField,\n  Text,\n  HStack,\n} from \"@chakra-ui/react\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { faEllipsisH } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\n\nconst MyPagination = ({ items, setCurrentItems }) => {\n  const [lastPage, setLastPage] = React.useState(0);\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const [startOffset, setStartOffSet] = React.useState(0);\n  const [itemsPerPage, setItemsPerPage] = React.useState(5);\n\n  React.useEffect(() => {\n    const endOffset = startOffset + itemsPerPage;\n    console.log(`Loading items from ${startOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(startOffset, endOffset));\n    setLastPage(Math.ceil(items.length / itemsPerPage));\n  }, [startOffset, itemsPerPage]);\n\n  const handlePageClick = (value) => {\n    // console.log(`page request: ${value}, current page: ${currentPage}`);\n    if (!isNaN(value) && value >= 0 && value < lastPage) {\n      setCurrentPage(value);\n      const newOffset = (value * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${value}, which is offset ${newOffset}`\n      );\n      setStartOffSet(newOffset);\n    } else console.log(`handlePageClick value: ${value}`);\n  };\n\n  const handleSetItemsPerPage = ({ target: { value } }) => {\n    handlePageClick(0);\n    if (!isNaN(parseInt(value))) {\n      setItemsPerPage(parseInt(value));\n    }\n  };\n\n  const handleGoTo = (e) => {\n    if (e.key === \"Enter\") {\n      const value = parseInt(e.target.value);\n      handlePageClick(value - 1);\n    }\n  };\n\n  return (\n    <HStack spacing=\"3\">\n      <PageButton\n        currentPage={currentPage}\n        handlePageClick={handlePageClick}\n        lastPage={lastPage}\n        numberPageAhead={4}\n      />\n      <Select defaultValue=\"5\" onChange={handleSetItemsPerPage}>\n        {[5, 10, 15, 20].map((el) => (\n          <option key={`${el}-per-page`} value={el}>\n            {el}/Page\n          </option>\n        ))}\n      </Select>\n      <Text>Go to:</Text>\n      <NumberInput\n        max={lastPage}\n        min={0}\n        maxW=\"20\"\n        variant=\"filled\"\n        onKeyDown={handleGoTo}\n      >\n        <NumberInputField />\n      </NumberInput>\n    </HStack>\n  );\n};\n\nconst PageButton = ({\n  currentPage,\n  lastPage,\n  handlePageClick,\n  numberPageAhead,\n}) => {\n  const render = [];\n\n  if (currentPage - 1 >= 0) {\n    render.push(\n      <IconButton\n        icon={<ChevronLeftIcon />}\n        onClick={() => handlePageClick(currentPage - 1)}\n        key={`prev-page-${currentPage - 1}`}\n      />\n    );\n  }\n\n  if (currentPage > 2) {\n    render.push(\n      <React.Fragment key={`first-page`}>\n        <Button onClick={() => handlePageClick(0)}>1</Button>\n        <FontAwesomeIcon icon={faEllipsisH} color=\"gray\" />\n      </React.Fragment>\n    );\n  }\n\n  let startIdx;\n  let endIdx;\n  if (currentPage - 1 >= 0) {\n    startIdx = currentPage - 1;\n    endIdx =\n      startIdx + numberPageAhead < lastPage\n        ? startIdx + numberPageAhead\n        : lastPage;\n  } else {\n    startIdx = 0;\n    endIdx = lastPage >= numberPageAhead ? numberPageAhead : lastPage;\n  }\n  if (\n    currentPage + numberPageAhead >= lastPage &&\n    lastPage - numberPageAhead >= 0\n  ) {\n    startIdx = lastPage - numberPageAhead;\n    endIdx = lastPage;\n  }\n\n  for (let idx = startIdx; idx < endIdx; idx++) {\n    const offset = idx + 1;\n    render.push(\n      <Button\n        key={`page-${offset}`}\n        onClick={() => handlePageClick(idx)}\n        colorScheme={idx === currentPage ? \"messenger\" : \"gray\"}\n      >\n        {offset}\n      </Button>\n    );\n  }\n\n  if (endIdx < lastPage) {\n    render.push(\n      <React.Fragment key={`last-page-${lastPage}`}>\n        <FontAwesomeIcon icon={faEllipsisH} color=\"gray\" />\n        <Button onClick={() => handlePageClick(lastPage - 1)}>\n          {lastPage}\n        </Button>\n      </React.Fragment>\n    );\n  }\n\n  if (currentPage + 1 < lastPage) {\n    render.push(\n      <IconButton\n        icon={<ChevronRightIcon />}\n        onClick={() => handlePageClick(currentPage + 1)}\n        key={`prev-page-${currentPage + 1}`}\n      />\n    );\n  }\n  return render;\n};\n\nexport default MyPagination;\n","import Views from \"./Views\";\nimport React from \"react\";\nimport Pagination from \"../../utils/MyPagination\";\nimport { VStack } from \"@chakra-ui/react\";\n\nconst Result = ({ Products }) => {\n  const [sliceProducts, setSliceProducts] = React.useState([]);\n\n  return (\n    <VStack spacing={10}>\n      <Views Products={sliceProducts} />\n      <Pagination items={Products} setCurrentItems={setSliceProducts} />\n    </VStack>\n  );\n};\n\nexport default Result;\n","import { Container, Grid, GridItem } from \"@chakra-ui/layout\";\nimport Filter from \"./Filter\";\nimport Result from \"./Result\";\nimport React from \"react\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport useFetch from \"../../utils/useFetch\";\nimport DividerHelper from \"../../utils/DividerHelper\";\n\nconst Category = () => {\n  const [Category, setCategory] = React.useState(\"\");\n  const [URI, setURI] = React.useState(process.env.REACT_APP_GET_PRODUCTS);\n  const [Products, isLoading, isError] = useFetch(URI);\n  const [SearchValue, setSearchValue] = React.useState(\"\");\n\n  // Chua chay\n  const filterResult = React.useMemo(() => {\n    if (!SearchValue) return Products;\n\n    return Products.filter(\n      ({ title }) => title.toLowerCase().indexOf(SearchValue.toLowerCase()) > -1\n    );\n  }, [SearchValue, Products]);\n\n  React.useEffect(() => {\n    if (Category)\n      setURI(`${process.env.REACT_APP_GET_PRODUCT_IN_CATEGORY}/${Category}`);\n  }, [Category]);\n\n  return (\n    <Container maxW=\"container.xl\" >\n      <Grid\n        autoFlow={{ base: \"row\", md: \"column\" }}\n        gap=\"10\"\n        templateColumns={{ md: \"25% auto\" }}\n      >\n        <GridItem mt=\"10\">\n          <Filter\n            onSelectCategory={(e) => setCategory(e.target.value)}\n            onSearch={(e) => setSearchValue(e.target.value)}\n          />\n        </GridItem>\n\n        <DividerHelper isHorizontal={false} />\n\n        <GridItem mt=\"10\">\n          {isError && <h1>Uh oh... There is something wrong</h1>}\n          {isLoading && (\n            <Spinner\n              thickness=\"4px\"\n              speed=\"0.65s\"\n              emptyColor=\"gray.200\"\n              color=\"blue.500\"\n              size=\"xl\"\n            />\n          )}\n          {!isLoading && <Result Products={filterResult} />}\n        </GridItem>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Category;\n"],"sourceRoot":""}